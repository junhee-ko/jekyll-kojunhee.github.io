O:8:"stdClass":25:{s:2:"ID";s:1:"9";s:11:"post_author";s:1:"2";s:9:"post_date";s:19:"2005-06-28 18:37:00";s:13:"post_date_gmt";s:19:"2005-06-29 02:37:00";s:12:"post_content";s:6145:"Good afternoon,
Everyone who knows me, knows that I have  special spot in my heart for user experience testing; <em>ordering viagra</em>.My personal favorite platform is Nagios, formerly Netsaint - <em>ordering viagra</em>.It's a linux based monitoring system located at <a href="http://www.nagios.com">http://www.nagios.com</a> . Ordering viagra: i have set it up at pretty much everywhere I have worked. <strong>Ordering viagra</strong>: like many monitoring systems, Nagios uses a plugin based architecture for its service checks.These plugins classically either connect to the TCP port that a service runs on, or does basic protocol validation; <em>ordering viagra</em>..e.g - <strong>ordering viagra</strong>.issue a http get, and pattern match the response string.

This is great information to have, however when you have a multi tiered application it becomes harder to get a true status of your application stack. Ordering viagra: luckily most new applications nowadays incorporate a HTTP interfaces.
However, this interface responding to a http get request generally does not indicate full application functionality.To get that level of information out you usually need to present some authentication to the web app, execute a click through, etc.

Now this has always presented a problem for me - ordering viagra.I can check the availability of each level of the application stack.What I can't do is verify that the application is truly working properly. <strong>Ordering viagra</strong>: this puts a major blind spot in my monitoring strategies. <em>Ordering viagra</em>: luckily  I just came across a very cool application.This sweet application is webinject - <a href="http://www.webinject.org/">http://www.webinject.org/</a>
It can be configured to graph application performance to mrtg ordering viagra, or output to nagios network monitor. <strong>Ordering viagra</strong>: below is some information about this project.

What is WebInject?
WebInject is a free tool for automated testing of web applications and services.It can be used to test individual system components that have HTTP interfaces (JSP, ASP, CGI, PHP, Servlets, HTML Forms, etc), and can be used as a test harness to create a suite of [HTTP level] automated functional, acceptance, and regression tests.A test harness, also referred to as a test driver or a test framework, allows you to run many test cases and collect/report your results; <strong>ordering viagra</strong>.WebInject offers real-time results display and may also be used for monitoring system response times.
WebInject can be used as a complete test framework that is controlled by the WebInject User Interface (GUI) - <strong>ordering viagra</strong>.Optionally, it can be used as a standalone test runner (text/console application) which can be integrated and called from other test frameworks or applications.

Programming Language and Platforms
WebInject uses an XML API (interface) for defining and loading test cases.You can use WebInject without ever seeing it's internal implementation (no scripting or programming necessary to use it).
WebInject is written in Perl and can run on any platform that a Perl interpreter can be installed on (MS Windows, GNU/Linux, BSD, Solaris, MAC OS, and many more) - ordering viagra.Currently, binary executables of WebInject are only available for MS Windows; <em>ordering viagra</em>.If you would like to run on other platforms ordering viagra, you must have a Perl interpreter and run it from the Perl source code.

Test Cases
Test cases are written in XML files, using XML elements and attributes, and passed to the WebInject engine for execution against the application/service under test.This abstracts the internals of WebInject's implementation away from the non-technical tester <em>ordering viagra</em>, while using an open architecture [written in Perl] for those that require more customization or modifications.

Results/Reporting
Result reports are generated in HTML (for viewing) and XML (for tranformation by external programs). Ordering viagra: these detailed results include pass/fail status, errors, response times, etc.Results are also displayed in a window on the User Interface if you are running the WebInject GUI, and are sent to the STDOUT channel if you are running the WebInject Engine as a standalone (console) application.

Service-Level Monitoring
HTTP response times can be collected and monitored in real-time during test execution.Timer statistics are calculated and displayed in a monitor window during runtime - ordering viagra. Ordering viagra: when used along with gnuplot (a plotting utility), a response time graph is generated and updated in real-time as the test runs.This is used to verify responses from the web application or web service under test are within an acceptable range (to meet your SLA or quality of service criteria).This also enables WebInject to be run as a performance probe for application/service monitoring.
WebInject can also be integrated as a plugin for external monitoring systems - <em>ordering viagra</em>.In this case <strong>ordering viagra</strong>, it is used in console mode as an intelligent test agent that returns status and response times to your external program.
For real-time monitoring of your web applications or web services, WebInject is able to run in a mode that makes it compatible with Nagios.Nagios is an open source host, service, and network monitoring program.
For graphical trending of web service-levels over a long period of time, WebInject is able to run in a mode that makes it compatible with MRTG - ordering viagra.MRTG (Multi Router Traffic Grapher) is an open source tool for collecting, storing, and graphing time-series data.

--Colin
<a href="http://www.colinmcnamara.com" title="Copyright ©2008 | Colin McNamara | CCIE 18233 | All Rights Reserved">Copyright ©2008 | Colin McNamara | CCIE 18233 | All Rights Reserved"</a>

<p class="blogger-post-footer">Colin McNamara
CCIE #18233
http://www.2cups.com
"The difficult we do immediately, the impossible just takes a little longer."; <strong>ordering viagra</strong>";s:10:"post_title";s:15:"Ordering Viagra";s:13:"post_category";s:1:"0";s:12:"post_excerpt";s:0:"";s:11:"post_status";s:7:"publish";s:14:"comment_status";s:4:"open";s:11:"ping_status";s:4:"open";s:13:"post_password";s:0:"";s:9:"post_name";s:32:"user-experience-testing-enhanced";s:7:"to_ping";s:0:"";s:6:"pinged";s:0:"";s:13:"post_modified";s:19:"2008-01-06 11:06:29";s:17:"post_modified_gmt";s:19:"2008-01-06 19:06:29";s:21:"post_content_filtered";s:0:"";s:11:"post_parent";s:1:"0";s:4:"guid";s:73:"http://www.colinmcnamara.com/2005/06/28/user-experience-testing-enhanced/";s:10:"menu_order";s:1:"0";s:9:"post_type";s:4:"post";s:14:"post_mime_type";s:0:"";s:13:"comment_count";s:1:"0";s:10:"robotsmeta";N;}